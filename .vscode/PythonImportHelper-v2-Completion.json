[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "MySQL",
        "importPath": "flask_mysqldb",
        "description": "flask_mysqldb",
        "isExtraImport": true,
        "detail": "flask_mysqldb",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "MD5",
        "kind": 6,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "class MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()\ncrypt = MD5()\nprint(crypt.encrypt('MeowMeowMeow')) # Encrypt\nprint(crypt.decrypt(\"gAAAAABnS_f3cGMHcmH1KlAmbO9B1Sh4Ug1R4A-o9ZzeQ_oocF-Xx_nzWqO3GVsRuK7NpFKldlek9t3FzzP6lbdIAgzX8DHG1A==\"))\ndef serialize_result(cursor, rows):\n    # Получаем названия колонок из курсора",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "serialize_result",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def serialize_result(cursor, rows):\n    # Получаем названия колонок из курсора\n    columns = [desc[0] for desc in cursor.description]\n    # Создаем список словарей, где ключами будут названия колонок\n    return [dict(zip(columns, row)) for row in rows]\n# Получить все записи\n@app.route('/api/getAllTour', methods=['GET'])\ndef get_all_tour():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT * FROM tours\")",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "get_all_tour",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def get_all_tour():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT * FROM tours\")\n    rows = cur.fetchall()\n    return jsonify(serialize_result(cur, rows))\n# Получить все записи\n@app.route('/api/getAllTourTeams', methods=['GET'])\ndef get_all_tour_teams():\n    id = request.args.get('id')\n    cur = mysql.connection.cursor()",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "get_all_tour_teams",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def get_all_tour_teams():\n    id = request.args.get('id')\n    cur = mysql.connection.cursor()\n    # Используем параметризированный запрос\n    cur.execute(\"SELECT * FROM tour_teams WHERE tour_id = %s\", (id,))\n    rows = cur.fetchall()\n    return jsonify(serialize_result(cur, rows))\n# Получить все записи\n@app.route('/api/getAllTourTeams', methods=['GET'])\ndef get_all_tour_teams():",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "get_all_tour_teams",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def get_all_tour_teams():\n    id = request.args.get('id')\n    cur = mysql.connection.cursor()\n    # Используем параметризированный запрос\n    cur.execute(\"SELECT * FROM tour_teams WHERE tour_id = %s\", (id,))\n    rows = cur.fetchall()\n    return jsonify(serialize_result(cur, rows))\n@app.route('/api/items', methods=['GET'])\ndef get_items():\n    cur = mysql.connection.cursor()",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def get_items():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT * FROM items\")\n    rows = cur.fetchall()\n    return jsonify(rows)\n# Добавить новую запись\n@app.route('/api/items', methods=['POST'])\ndef add_item():\n    new_item = request.json['name']\n    cur = mysql.connection.cursor()",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "def add_item():\n    new_item = request.json['name']\n    cur = mysql.connection.cursor()\n    cur.execute(\"INSERT INTO items(name) VALUES(%s)\", (new_item,))\n    mysql.connection.commit()\n    return jsonify({'message': 'Item added successfully'}), 201\n# Запуск приложения\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\nassert SECRET_KEY\nprint(SECRET_KEY)\nFERNET = Fernet(SECRET_KEY)\napp = Flask(__name__)\nCORS(app)\n# Конфигурация базы данных\napp.config['MYSQL_HOST'] = os.getenv(\"DB_HOST\")\napp.config['MYSQL_USER'] = os.getenv(\"DB_USERNAME\")\napp.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "FERNET",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "FERNET = Fernet(SECRET_KEY)\napp = Flask(__name__)\nCORS(app)\n# Конфигурация базы данных\napp.config['MYSQL_HOST'] = os.getenv(\"DB_HOST\")\napp.config['MYSQL_USER'] = os.getenv(\"DB_USERNAME\")\napp.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")\napp.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Конфигурация базы данных\napp.config['MYSQL_HOST'] = os.getenv(\"DB_HOST\")\napp.config['MYSQL_USER'] = os.getenv(\"DB_USERNAME\")\napp.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")\napp.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_HOST']",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "app.config['MYSQL_HOST'] = os.getenv(\"DB_HOST\")\napp.config['MYSQL_USER'] = os.getenv(\"DB_USERNAME\")\napp.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")\napp.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_USER']",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "app.config['MYSQL_USER'] = os.getenv(\"DB_USERNAME\")\napp.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")\napp.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()\ncrypt = MD5()",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_PASSWORD']",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "app.config['MYSQL_PASSWORD'] = os.getenv(\"DB_PASSWORD\")\napp.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()\ncrypt = MD5()\nprint(crypt.encrypt('MeowMeowMeow')) # Encrypt",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_DB']",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "app.config['MYSQL_DB'] = os.getenv(\"DB_NAME\")\nmysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()\ncrypt = MD5()\nprint(crypt.encrypt('MeowMeowMeow')) # Encrypt\nprint(crypt.decrypt(\"gAAAAABnS_f3cGMHcmH1KlAmbO9B1Sh4Ug1R4A-o9ZzeQ_oocF-Xx_nzWqO3GVsRuK7NpFKldlek9t3FzzP6lbdIAgzX8DHG1A==\"))",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "mysql",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "mysql = MySQL(app)\nclass MD5:\n   def encrypt(self, data):\n       return FERNET.encrypt(data.encode()).decode()\n   def decrypt(self, data):\n       return FERNET.decrypt(data).decode()\ncrypt = MD5()\nprint(crypt.encrypt('MeowMeowMeow')) # Encrypt\nprint(crypt.decrypt(\"gAAAAABnS_f3cGMHcmH1KlAmbO9B1Sh4Ug1R4A-o9ZzeQ_oocF-Xx_nzWqO3GVsRuK7NpFKldlek9t3FzzP6lbdIAgzX8DHG1A==\"))\ndef serialize_result(cursor, rows):",
        "detail": "back.main",
        "documentation": {}
    },
    {
        "label": "crypt",
        "kind": 5,
        "importPath": "back.main",
        "description": "back.main",
        "peekOfCode": "crypt = MD5()\nprint(crypt.encrypt('MeowMeowMeow')) # Encrypt\nprint(crypt.decrypt(\"gAAAAABnS_f3cGMHcmH1KlAmbO9B1Sh4Ug1R4A-o9ZzeQ_oocF-Xx_nzWqO3GVsRuK7NpFKldlek9t3FzzP6lbdIAgzX8DHG1A==\"))\ndef serialize_result(cursor, rows):\n    # Получаем названия колонок из курсора\n    columns = [desc[0] for desc in cursor.description]\n    # Создаем список словарей, где ключами будут названия колонок\n    return [dict(zip(columns, row)) for row in rows]\n# Получить все записи\n@app.route('/api/getAllTour', methods=['GET'])",
        "detail": "back.main",
        "documentation": {}
    }
]